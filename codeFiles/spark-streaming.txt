val sparkConf = new SparkConf
sparkConf.setAppName("strmng-src")
sparkConf.setMaster("local[2]")
sparkConf.set("spark.driver.allowMultipleContexts", "true");

val ssc = new StreamingContext(sparkConf, Seconds(1))

val lines = ssc.socketTextStream("localhost", 9999)

val words = lines.flatMap(_.split(" "))
val pairs = words.map(word => (word, 1))
val wordCounts = pairs.reduceByKey(_ + _)
wordCounts.print()

//Start Stream nc -lk 9999
ssc.start()

import kafka.serializer.StringDecoder
import org.apache.spark.SparkConf
import org.apache.spark.streaming.{Seconds, StreamingContext}
import org.apache.spark.streaming.kafka.KafkaUtils

val sparkConf = new SparkConf
sparkConf.setAppName("strmngWrdCnt")
sparkConf.setMaster("local[2]")
sparkConf.set("spark.driver.allowMultipleContexts", "true")

val ssc = new StreamingContext(conf, Seconds(1))

val kafkaConf = Map("metadata.broker.list" -> "localhost:9092,localhost:9093,localhost:9094")
val topics = Set("sparkstreaming_IN")
val stream = KafkaUtils.createDirectStream[Array[Byte], String, StringDecoder, StringDecoder](ssc, kafkaConf, topics)

ssc.start()

kafka-console-producer.sh --broker-list localhost:9092 --topic sparkstreaming_IN

import org.apache.spark.SparkConf
import org.apache.spark.streaming.{Seconds, StreamingContext}
import org.apache.spark.streaming.kafka.KafkaUtils

val conf = new SparkConf
conf.setAppName("KFKASPRKSTRMNG")
conf.setMaster("local[2]")
conf.set("spark.driver.allowMultipleContexts", "true")

val ssc = new StreamingContext(conf, Seconds(1))

val kafkaConf = Map(
"metadata.broker.list" -> "localhost:9092",
"zookeeper.connect" -> "localhost:2181",
"group.id" -> "kafka-spark-streaming",
"zookeeper.connection.timeout.ms" -> "1000")

val topics = Map("sparkstreaming_IN")
val stream = KafkaUtils.createDirectStream[String, String, StringDecoder, StringDecoder](ssc, kafkaConf, topics)
