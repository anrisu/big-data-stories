import org.apache.spark._
import org.apache.spark.sql._
import org.apache.spark.streaming._
import org.apache.spark.streaming.kafka010._
import org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent
import org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe
import org.apache.kafka.common.serialization.StringDeserializer
import spark.implicits._

val kafkaParams = Map[String, Object](
    "bootstrap.servers" -> "localhost:9092,localhost:9093,localhost:9094",
    "key.deserializer" -> classOf[StringDeserializer],
    "value.deserializer" -> classOf[StringDeserializer],
    "group.id" -> "stock_ticker",
    "auto.offset.reset" -> "latest",
    "enable.auto.commit" -> (false: java.lang.Boolean)
  );

val ssc = new StreamingContext(sc, Seconds(10));

val inputStream = KafkaUtils.createDirectStream(ssc, PreferConsistent, Subscribe[String, String](Array("stock_ticker"), kafkaParams));
val processedStream = inputStream.flatMap(line=>line.value.split("\n"));

case class trade(xchange: String, symbol: String, trdate: String, open: Float,high: Float,low: Float,close: Float,volume: Integer,adj_close: Float);

//Inline Analytics
processedStream.foreachRDD{rddrec=>
val arrr= rddrec.collect()
val rddd= sc.parallelize(arrr).map(_.split(",")).map(lines=>trade(lines(0).toString,lines(1).toString,lines(2).toString,lines(3).toFloat,lines(4).toFloat,lines(5).toFloat,lines(6).toFloat,lines(7).toInt, lines(8).toFloat))
val mydf=rddd.toDF()
mydf.createOrReplaceTempView("stockView")
}

ssc.start
//ssc.awaitTermination

ssc.stop(stopSparkContext=false, stopGracefully=true)

//-------------------------//-------------------------//-------------------------//-------------------------//-------------------------//-------------------------//-------------------------
import org.apache.spark._
import org.apache.spark.streaming._
import org.apache.spark.sql._
import spark.sql
import spark.implicits._

import org.apache.kafka.common.serialization.StringDeserializer
import org.apache.spark.streaming.kafka010._
import org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent
import org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe

val kafkaParams = Map[String, Object](
    "bootstrap.servers" -> "localhost:9092,localhost:9093,localhost:9094",
    "key.deserializer" -> classOf[StringDeserializer],
    "value.deserializer" -> classOf[StringDeserializer],
    "group.id" -> "transactions",
    "auto.offset.reset" -> "latest",
    "enable.auto.commit" -> (false: java.lang.Boolean)
  )

val ssc = new StreamingContext(sc, Seconds(5))
case class atmlog(tran_id: String, tran_dt: String, branch: String, lat: Float, lon: Float,tran_typ: String,tran_amt: Float);

val inputStream = KafkaUtils.createDirectStream(ssc, PreferConsistent, Subscribe[String, String](Array("atmlogs"), kafkaParams));
val processedStream= inputStream.map(record=>record.value.split(",")).map(line=>atmlog(line(0).toString, line(1).toString, line(2).toString, line(3).toFloat,line(4).toFloat,line(5).toString,line(6).toFloat));

//Inline Analytics
processedStream.foreachRDD{
rddrec=>rddrec.toDF.createOrReplaceTempView("t_atmlogs")
}

/*
//Inline Analytics
processedStream.foreachRDD{rddrec=>
val arrr= rddrec.collect()
val rddd= sc.parallelize(arrr).map(_.split(",")).map(lines=>atmlog(lines(0).toString,lines(1).toString,lines(2).toString,lines(3).toFloat,lines(4).toFloat,lines(5).toString,lines(6).toFloat))
val mydf=rddd.toDF()
mydf.createOrReplaceTempView("t_atmlogs")
}
*/
ssc.start
ssc.awaitTermination

ssc.stop(stopSparkContext=false, stopGracefully=true)
