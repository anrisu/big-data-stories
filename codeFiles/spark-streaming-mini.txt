import org.apache.spark._
import org.apache.spark.sql._
import org.apache.spark.streaming._
import org.apache.spark.streaming.kafka010._
import org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent
import org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe
import org.apache.kafka.common.serialization.StringDeserializer
import spark.implicits._
val kafkaParams = Map[String, Object](
    "bootstrap.servers" -> "localhost:9092,localhost:9093,localhost:9094",
    "key.deserializer" -> classOf[StringDeserializer],
    "value.deserializer" -> classOf[StringDeserializer],
    "group.id" -> "nyse-stock-ticker",
    "auto.offset.reset" -> "latest",
    "enable.auto.commit" -> (false: java.lang.Boolean)
  )

val ssc = new StreamingContext(sc,Seconds(5))

val inputStream = KafkaUtils.createDirectStream(ssc, PreferConsistent, Subscribe[String, String](Array("stock-ticker"), kafkaParams))

val processedStream = inputStream.flatMap(line=>line.value.split("\n"));

case class trade(xchange: String, symbol: String, trdate: String, open: Float,high: Float,low: Float,close: Float,volume: Integer,adj_close: Float);

processedStream.foreachRDD{rddrec=>
if(!rddrec.isEmpty){
rddrec.saveAsTextFile("/tmp/streaming/2904-stream-".concat(System.nanoTime.toString()))
}
}

processedStream.foreachRDD{rddrec=>
val arrr= rddrec.collect()
val rddd= sc.parallelize(arrr).map(_.split(",")).map(lines=>trade(lines(0).toString,lines(1).toString,lines(2).toString,lines(3).toFloat,lines(4).toFloat,lines(5).toFloat,lines(6).toFloat,lines(7).toInt, lines(8).toFloat))
val mydf= rddd.toDF()
mydf.repartition(9)
mydf.count
}

ssc.start
